#!/usr/bin/perl -w
# Copyright 2021 SUSE LLC
# SPDX-License-Identifier: GPL-2.0-or-later
#

use Mojo::Base -strict, -signatures;
use Mojo::JSON qw(encode_json);
use Mojo::Log;
use Getopt::Long::Descriptive;

use FindBin '$Bin';
use lib "$Bin";
use cv;
use needle;

# define a basic needle package; normally `needle` should inherit from this package
{
    package basic_needle;
    use base 'needle';
    use Mojo::File qw(path);

    sub new ($classname, $image_path, $match_level, $margin) {
        my $name  = path($image_path)->basename;
        my $image = tinycv::read $image_path;
        my %area  = (type => 'match', match => $match_level, margin => $margin,
            xpos => 0, ypos => 0, width => $image->xres, height => $image->yres,
            img  => $image);
        my $self = {name => $name, png => $image_path, area => [\%area]};
        bless $self, $classname;
        $self->register;
        return $self;
    }

    sub get_image ($self, $area = undef) { ($area // $self->{area}->[0])->{img} }

    sub from_paths ($needle_paths, @args) { [map { basic_needle->new($_, @args) } @$needle_paths] }
}

my ($opt, $usage) = describe_options(
    'imgsearch %o',
    ['needle-images=s@{1,}',   'pecifies images to look for',                                                         {required => 1}],
    ['haystack-images=s@{1,}', 'specifies images to look in',                                                         {required => 1}],
    ['match-level=f',          'specifies the min. similarity for an occurrence to be considered a match in percent', {default  => 80.0}],
    ['threshold=f',            'hidden',                                                                              {default  => 0.0}],
    ['margin=f',               'hidden',                                                                              {default  => 1000000}],
    ['search-ratio=f',         'hidden',                                                                              {default  => 0.0}],
    ['verbose|v',              'enables debug output'],
    ['help',                   'prints help', {shortcircuit => 1}],
);
print $usage->text and exit if $opt->help;

# initialize logging, tinycv and parameters
my $log = Mojo::Log->new;
$log->level($opt->verbose ? 'debug' : 'info');
$log->debug('Loading tinycv');
cv::init;
require tinycv;
my $match_level  = $opt->match_level;     # the similarity level required to consider a finding a match (unit: percent)
my $margin       = $opt->margin;          # very high value to search within full image by default (unit: pixel)
my $search_ratio = $opt->search_ratio;    # set to zero to disable unwanted computation of margin (which assumes an image width of 1024 px)
my $threshold    = $opt->threshold;       # subtracted from each area's match level; just keep at zero here
$log->debug("Martch-level: $match_level, margin: $margin, threshold: $threshold, search ratio: $search_ratio");

# load needles
$log->info('Loading needles');
my $needles = basic_needle::from_paths($opt->needle_images, $match_level, $margin);

# search needles in images
my %results = map {
    my $image_path = $_;
    $log->info("Searching $image_path");
    my $image = tinycv::read $image_path;
    my ($match, $candidates) = $image->search($needles, $threshold, $search_ratio);
    ($image_path => {match => $match, candidates => $candidates});
} @{$opt->haystack_images};

print encode_json(\%results);
